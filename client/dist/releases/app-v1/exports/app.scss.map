{"version":3,"sourceRoot":"","sources":["file:///D:/package/bin/plugins/scss/framework/ungic/utils/functions.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/project/config.scss","file:///D:/package/bin/plugins/scss/framework/ungic/meta/functions/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/project/themes/viola.scss","file:///D:/package/bin/plugins/scss/framework/theme/config.scss","file:///D:/package/bin/plugins/scss/framework/theme/functions.scss","file:///D:/package/bin/plugins/scss/framework/theme/init.scss","file:///D:/package/bin/plugins/scss/framework/theme/mixins.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/project/properties.scss","file:///D:/package/bin/plugins/scss/framework/ungic/project/property-handlers.scss","file:///D:/package/bin/plugins/scss/framework/ungic/project/functions.scss","file:///D:/package/bin/plugins/scss/framework/ungic/project/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/properties.scss","ungic.components.app.properties_over","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/props/config.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/props/handlers.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/props/functions.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/props/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/config.scss","ungic.components.app.config_over","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/config.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/functions/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/mixins/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/.core/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/once.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/functions/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/mixins/index.scss","file:///D:/Open%20Server/domains/webto-pro.local/wp-content/plugins/wtp-mixcode/client/source/scss/components/app/render.scss"],"names":[],"mappings":";AA2DA;AAAA;AAAA;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiJA;AAAA;AAAA;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAKA;AAAA;AAAA;AAgBA;AAAA;AAAA;AC7EA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAgBA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAuEA;AAAA;AAAA;AAAA;AAqEA;AAAA;AAAA;AA+DA;AAAA;AAAA;AAaA;AAAA;AAAA;AAYA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAWA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAyDA;AAAA;AAAA;AAOA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAqDA;AAAA;AAAA;AAwBA;AAAA;AAAA;ACpoBA;AAAA;AAAA;AAMA;AAAA;AAAA;ACDA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAmBA;AAAA;AAAA;AASA;AAAA;AAAA;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;ACYA;AAAA;AAAA;ACZA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAOA;AAAA;AAAA;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AASA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;ACnJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AJAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AnBAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AD2DA;AAAA;AAAA;AEjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiJA;AAAA;AAAA;AmB3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAOA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AASA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;ARnJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AVMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAKA;AAAA;AAAA;AAgBA;AAAA;AAAA;AC7EA;AAAA;AAAA;AA8CA;AAAA;AAAA;AAgBA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAuEA;AAAA;AAAA;AAAA;AAqEA;AAAA;AAAA;AA+DA;AAAA;AAAA;AAaA;AAAA;AAAA;AAYA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAWA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAyDA;AAAA;AAAA;AAOA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAqDA;AAAA;AAAA;AAwBA;AAAA;AAAA;ACpoBA;AAAA;AAAA;AAMA;AAAA;AAAA;ACDA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAmBA;AAAA;AAAA;AASA;AAAA;AAAA;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AOAA;AAAA;AAAA;ANAA;AAAA;AAAA;ACYA;AAAA;AAAA;ACZA;AAAA;AAAA;AAAA;AKAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAOA;AAAA;AAAA;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AMAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AEAA;AAAA;AAAA;ACAA;AAAA;AAAA;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;EACE;;;AAGA;EACE;EACA;EACA;EAKA;EA8DA;EACA;EACA;EACA;EACA;EACA;;;AAvEA;EACE;EACA;;;AAGF;EACE;;;AAEF;EACE;EACA;;;AACA;EACE;EACA;;;AAEF;EACE;EACA;;;AAGJ;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAEF;EACE;;;AACA;EACE;;;AAEF;EACE;;;AAGJ;EACE;EACA;EACA;EACA;EACA;EACA;;;AAEF;EACE;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;;;AAEF;EACE;EACA;;;AASJ;EACE;;;AAEF;EACE;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;;;AAEF;EACE;;;AAIF;EACE;;;AACA;EACE;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;EACA;EACA;EACA;;;AAKJ;EACE;EACA;EACA;EACA;;;AAGJ;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;EACA;EACA;;;AACA;EACE;;;AAEF;EACE;;;AAEF;EACE;EAKA;;;AAJA;EACE;EACA;;;AAKN;EAIE;EACA;EACA;;;AALA;EACE;;;AAKF;EACE;;;AAEF;EACE;;;AAEF;EACE;EAKA;;;AAJA;EACE;EACA;;;AAMR;EACE;EACA;;;AAEF;EACE;EACA;EACA;EACA;;;AAEF;EACE;EACA;;;AACA;EAKE;EACA;;;AALA;EACE;EACA;;;AAIF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;;;AACA;EACE;;;AAOZ;EACE;EACA;EACA;;;AACA;EACE;EACA;EACA;EACA;EAIA;EACA;EACA;EACA;EACA;;;AAPA;EACE;;;AAOF;EACE;;;AAEF;EACE;;;AAIN;EACE;;;AAEF;EACI;EACA;EACA;;;AAGF;EACE;;;AAGJ;EACE;EACA;;;AACA;EACE;;;AACA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AAEF;EACE;EACA;EACA;EACA;EACA;EACA;;;AAEF;EACE;;;AACA;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;AACA;EACE;;;AAEF;EACE;;;AAEF;EACE;;;AACA;EACE;EACA;EACA;;;AAGA;EACE;;;AAMV;EACE;;;AAEF;EACE;;;AAGI;EACE;;;AAQF;EACE;;;AAKJ;EACE","file":"stdin.css","sourcesContent":["@use \"sass:string\" as str;\r\n@use \"sass:list\";\r\n@use \"sass:map\";\r\n@use \"sass:math\";\r\n@use \"sass:meta\";\r\n\r\n@function str-replace($string, $search, $replace: '', $global: true) {\r\n  $index: str.index($string, $search);\r\n\r\n  @if $index {\r\n    @if $global {\r\n        @return str.slice($string, 1, $index - 1) + $replace + str-replace(str.slice($string, $index + str.length($search)), $search, $replace);\r\n    } @else {\r\n        @return str.slice($string, 1, $index - 1) + $replace + str.slice($string, $index + str.length($search));\r\n    }\r\n  }\r\n  @return $string;\r\n}\r\n\r\n@function deep-merge($source-map, $secondary-map) {\r\n    $result: $source-map;\r\n\r\n    @each $key, $value in $secondary-map {\r\n        @if (not map.has-key($result, $key)) or (type-of(map.get($result, $key)) !=type-of($value)) or (not (type-of(map.get($result, $key))==map and type-of($value)==map)) {\r\n            $result: map.merge($result, ($key: $value));\r\n        }\r\n\r\n        @else {\r\n            $result: map.merge($result, ($key: deep-merge(map.get($result, $key), $value)));\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function px($num) {\r\n  @return strip-unit($num) + 0px;\r\n}\r\n\r\n@function em($px, $def) {\r\n    @return math.div(strip-unit($px), strip-unit($def)) + 0em;\r\n}\r\n\r\n@function merge($maps...) {\r\n    $result: ();\r\n\r\n    @if(length($maps) > 1) {\r\n        @each $map in $maps {\r\n            $result: deep-merge($result, $map);\r\n        }\r\n    }\r\n\r\n    @else if(length($maps)==1) {\r\n        $result: list.nth($maps, 1);\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n/*\r\n*   Inverts the number\r\n*/\r\n@function inv($number) {\r\n    @if type-of($number) != number {\r\n        @warn '#{$number} is not number';\r\n    }\r\n    @return $number * -1;\r\n}\r\n\r\n@function negative($number) {\r\n    @if type-of($number) != number {\r\n        @warn '#{$number} is not number';\r\n        @return null;\r\n    }\r\n    @if($number < 0) {\r\n        @return $number;\r\n    }\r\n    @return $number * -1;\r\n}\r\n\r\n@function unit-merge($number, $unit) {\r\n    @if not math.is-unitless($number) {\r\n        @return $number;\r\n    }\r\n    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n    @if not list.index(map.keys($units), $unit) {\r\n        @warn 'Invalid unit #{$unit}';\r\n    }\r\n\r\n    @return $number * map.get($units, $unit);\r\n}\r\n\r\n@function strip-unit($number) {\r\n    @if type-of($number) == 'number' and not math.is-unitless($number) {\r\n        @return math.div($number, ($number * 0 + 1));\r\n    }\r\n\r\n    @return $number;\r\n}\r\n\r\n\r\n@function insert-nth($list, $index, $value) {\r\n  $result: null;\r\n\r\n  @if type-of($index) != number {\r\n    @warn \"$index: #{quote($index)} is not a number for `insert-nth`.\";\r\n  } @else if $index < 1 {\r\n    @warn \"List index 0 must be a non-zero integer for `insert-nth`\";\r\n  } @else if $index > length($list) {\r\n    @warn \"List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.\";\r\n  } @else {\r\n    $result: ();\r\n\r\n    @for $i from 1 through length($list) {\r\n      @if $i == $index {\r\n        $result: append($result, $value);\r\n      }\r\n\r\n      $result: append($result, nth($list, $i));\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function remove-nth($list, $index) {\r\n    $result: null;\r\n\r\n    @if type-of($index) !=number {\r\n        @warn \"$index: #{str.quote($index)} is not a number for `remove-nth`.\";\r\n    }\r\n\r\n    @else if $index==0 {\r\n        @warn \"List index 0 must be a non-zero integer for `remove-nth`.\";\r\n    }\r\n\r\n    @else if math.abs($index) > list.length($list) {\r\n        @warn \"List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.\";\r\n    }\r\n\r\n    @else {\r\n        $result: ();\r\n        $index: if($index < 0, list.length($list) + $index + 1, $index);\r\n\r\n        @for $i from 1 through list.length($list) {\r\n            @if $i !=$index {\r\n                $result: list.append($result, list.nth($list, $i));\r\n            }\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function replace-nth($list, $index, $replaceable_value) {\r\n    $result: null;\r\n\r\n    @if type-of($index) !=number {\r\n        @warn \"$index: #{str.quote($index)} is not a number for `insert-nth`.\";\r\n    }\r\n\r\n    @else if $index < 1 {\r\n        @warn \"List index 0 must be a non-zero integer for `insert-nth`\";\r\n    }\r\n\r\n    @else if $index > list.length($list) {\r\n        @warn \"List index is #{$index} but list is only #{list.length($list)} item long for `insert-nth'.\";\r\n    }\r\n\r\n    @else {\r\n        $result: ();\r\n\r\n        @for $i from 1 through list.length($list) {\r\n            @if $i==$index {\r\n                $result: list.append($result, $replaceable_value);\r\n            }\r\n\r\n            @else {\r\n                $result: list.append($result, nth($list, $i));\r\n            }\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function char($character-code) {\r\n    @if function-exists(\"selector-append\") {\r\n        @return str.unquote(\"\\\"\\\\#{$character-code}\\\"\");\r\n    }\r\n\r\n    @if \"\\\\#{'x'}\"==\"\\\\x\" {\r\n        @return str.slice(\"\\x\", 1, 1)+$character-code;\r\n    }\r\n\r\n    @else {\r\n        @return #{\"\\\"\\\\\"}#{$character-code + \"\\\"\"};\r\n    }\r\n}\r\n\r\n@function dir($ltr, $rtl) {\r\n    @return #{$ltr + '/*rtl:' + $rtl + '*/'};\r\n}\r\n\r\n@function rtli($val) {\r\n    @return #{$val + '/*rtl:ignore*/'};\r\n}\r\n\r\n@function rtl-ignore($val) {\r\n    @return rtli($val);\r\n}\r\n\r\n@function rtl-prepend($value, $rtl-prepend, $sep:' ') {\r\n    @return #{$value + '/*rtl:prepend:' + $rtl-prepend + $sep + '*/'};\r\n}\r\n\r\n@function rtl-append($value, $rtl-append, $sep: ' ') {\r\n    @return #{$value + '/*rtl:append:' + $sep + $rtl-append + '*/'};\r\n}","/*------------------------------------------\r\n*   Optional project file\r\n--------------------------------------------\r\n*   Module: ungic.project\r\n*   Desc: Here you can set global variables for the entire project\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-project\r\n*/\r\n\r\n$available-theme-colors: (extra);","@use \"sass:string\" as str;\r\n@use \"sass:color\";\r\n@use \"sass:list\";\r\n@use \"sass:map\";\r\n@use \"sass:math\";\r\n@use \"sass:meta\";\r\n@use \"ungic.utils\" as *;\r\n@use \"ungic.project.config\" as config;\r\n@use \"ungic.default-properties\" as default-props;\r\n\r\n/*\r\n*   Export data for a specific component\r\n*   $cid -> Component id\r\n*   $oid -> Option Name (any key name)\r\n*   $data -> Any data\r\n*/\r\n@function export($cid, $oid, $data) {\r\n    @if(type-of($oid) != 'string' and type-of($oid) != 'number') {\r\n        @warn \"oid should be a string or a number\";\r\n        @return null;\r\n    }\r\n    @return to-export($cid, $oid, json-encode($data));\r\n}\r\n\r\n@function hsl($color, $strip-unit: true, $asmap: false) {\r\n    @if('color' != type-of($color)) {\r\n        @warn '#{$color} is not a color';\r\n        @return ();\r\n    }\r\n\r\n    $h: color.hue($color);\r\n    $s: color.saturation($color);\r\n    $l: color.lightness($color);\r\n\r\n    @if($strip-unit) {\r\n        $s: strip-unit(color.saturation($color));\r\n        $l: strip-unit(color.lightness($color));\r\n        $h: strip-unit(color.hue($color));\r\n    }\r\n\r\n    @if(not $asmap) {\r\n        @return ($h, $s, $l);\r\n    }\r\n\r\n    @else {\r\n        @return (h: $h,\r\n            s: $s,\r\n            l: $l);\r\n    }\r\n}\r\n\r\n@function lightest($color1, $color2) {\r\n    $hsl-color1: list.nth(hsl($color1), 3);\r\n    $hsl-color2: list.nth(hsl($color2), 3);\r\n    @if $hsl-color1 > $hsl-color2 {\r\n        @return $color1;\r\n    }\r\n    @return $color2;\r\n}\r\n\r\n@function darkest($color1, $color2) {\r\n    $hsl-color1: list.nth(hsl($color1), 3);\r\n    $hsl-color2: list.nth(hsl($color2), 3);\r\n    @if $hsl-color1 < $hsl-color2 {\r\n        @return $color1;\r\n    }\r\n    @return $color2;\r\n}\r\n\r\n@function is-darker($this-color, $than-this-color) {\r\n    $hsl-color1: list.nth(hsl($this-color), 3);\r\n    $hsl-color2: list.nth(hsl($than-this-color), 3);\r\n    @return $hsl-color1 < $hsl-color2;\r\n}\r\n\r\n@function get-all-available-сolors() {\r\n    $available-colors: config.$available-theme-colors;\r\n    $required-colors: (primary, secondary, system, info, danger, success, warning, text-color, background-color);\r\n    @each $color-name in $required-colors {\r\n        @if not list.index($available-colors, $color-name) {\r\n            $available-colors: list.append($available-colors, $color-name, $separator: comma);\r\n        }\r\n    }\r\n    @return $available-colors;\r\n}\r\n\r\n@function is-color-available($color-name) {\r\n    @if type-of($color-name) != string {\r\n        $color-name: meta.inspect($color-name);\r\n    }\r\n    $available-colors: get-all-available-сolors();\r\n    @if not list.index($available-colors, $color-name) {\r\n        @return false;\r\n    }\r\n    @return true;\r\n}\r\n\r\n@function is-valid-color-value($color-name, $color, $return_error: false) {\r\n    $error: '#{$color-name} has incorrect value. The theme color value must be of type color or a list of two color values: (color-by-default, color-in-inversion-mode)';\r\n\r\n    @if type-of($color) == list {\r\n        @if list.length($color) != 2 {\r\n            @if $return_error {\r\n                @return $error;\r\n            } @else {\r\n                @return false;\r\n            }\r\n        } @else {\r\n            @each $_color in $color {\r\n                @if type-of($_color) != color {\r\n                    @if $return_error {\r\n                        @return $error;\r\n                    } @else {\r\n                        @return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } @else if type-of($color) != color {\r\n        @if $return_error {\r\n            @return $error;\r\n        } @else {\r\n            @return false;\r\n        }\r\n    }\r\n    \r\n    @if ($color-name == 'text-color' or $color-name == 'background-color') and type-of($color) != list {\r\n        @if $return_error {\r\n            @return '#{$color-name} has incorrect value. The theme color value for text-color or background-color must be a list of two color values: (color-by-default, color-in-inversion-mode)';\r\n        } @else {\r\n            @return false;\r\n        }\r\n    }\r\n\r\n    @if $return_error {\r\n        @return false;\r\n    } @else {\r\n        @return true;\r\n    }\r\n}\r\n\r\n@function check-color-name($color-name) {\r\n    @if type-of($color-name) != string {\r\n        $color-name: meta.inspect($color-name);\r\n    }\r\n    @if $color-name == \"gray\" or $color-name == \"grey\" {\r\n        @return true;\r\n    }\r\n    @if is-color-available($color-name) {\r\n        @return true;\r\n    }\r\n    @warn '#{$color-name} is not available color!';\r\n    @return false;\r\n}\r\n\r\n/*\r\n*   Returns the default property value (From core of framework)\r\n*/\r\n@function default-prop($prop) {\r\n  $props: meta.module-variables(default-props);\r\n  @if not map.has-key($props, $prop) {\r\n    @return null;\r\n  }\r\n  @return map.get($props, $prop);\r\n}\r\n\r\n\r\n@function parse-selector($selector) {\r\n    $output: ();\r\n    @if type-of($selector) == list {\r\n        @each $selector in & {\r\n            $ishtml: list.nth($selector, 1);\r\n            @if $ishtml == html {\r\n                $selector: remove-nth($selector, 1);\r\n            }\r\n            $output: list.append($output, $selector, comma);\r\n        }\r\n    } @else {\r\n        @warn '#{$selector} selector must be of type list';\r\n        $output: $selector;\r\n    }\r\n    @return $output;\r\n}","/*------------------------------------------\r\n*   Theme file\r\n--------------------------------------------\r\n*   Theme: viola\r\n*   Desc: This file is part of ungic.theme module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-theme\r\n*/\r\n\r\n// Colors can be specified as a list, where the first value will be applied in normal mode and the second in inversion mode\r\n$colors: (\r\n    primary: #817ee9,\r\n    secondary: #1d1d27,\r\n    success: #1BC167,\r\n    danger: #FF5252,\r\n    info: #2196F3,\r\n    warning: #FFC94B,\r\n    system: #6a67d0,\r\n    text-color: (#2c2c38, #f6f5fc),\r\n    background-color: (#f6f5fc, #2c2c38)\r\n);\r\n\r\n$config: (\r\n    brightness: (\r\n        offset-brighten: 0,            // List type possible\r\n        offset-dim: 0,                 // List type possible\r\n        saturation-brighten: (0, 0),   // List type possible\r\n        saturation-dim: (0, 0)         // List type possible\r\n    ),\r\n    relative-light-limit : true,\r\n    gray: (\r\n        saturation: (20%, 12%),   // List type possible\r\n        hue: blue               // List type possible\r\n    )\r\n);\r\n","@use \"ungic.meta\" as un-meta;\r\n@use \"sass:meta\";\r\n@use \"sass:map\";\r\n@use \"sass:color\";\r\n@use \"sass:list\";\r\n\r\n/*\r\n*   Retrieves configuration from configuration file of active theme by path project/themes/THEME_NAME.css\r\n*   It depends on the chosen theme for rendering\r\n*/\r\n$settings: () !default;\r\n\r\n/*\r\n*   This is if the second run for inversion colors\r\n*/\r\n$inverse-mode: false !default;\r\n$theme-prefix: false !default;\r\n\r\n$colors: map.get($settings, 'colors');\r\n$config: map.get($settings, 'config');\r\n$palettes: map.get($settings, 'palettes');\r\n// Default inversion (Инверсия по умолчанию)\r\n$inverse: map.get($config, inverse);\r\n\r\n$default-inverse: $inverse;\r\n\r\n$inverse-support: map.get($config, inverse-support);\r\n$colors-vars-mode: map.get($config, colors-vars-mode);\r\n\r\n$name: map.get($settings, 'theme-name');\r\n\r\n\r\n/*\r\n*   Inverted relative to the global method\r\n*   Если это вторичный режим сборки в режиме инверсии и режим инверсии по умолчанию правда, тогда меняем его на ложь (инвертируем значение) и наоборот.\r\n*/\r\n@if($inverse-mode) {\r\n   // $inverse = defaultInverse\r\n    @if($inverse) {\r\n        $inverse: false\r\n    } @else {\r\n        $inverse: true\r\n    }\r\n}\r\n\r\n/*\r\n*   Generate a missing third (extra) color\r\n*/\r\n@if un-meta.is-color-available(extra) and (not map.has-key($colors, extra) and map.has-key($colors, primary) and map.has-key($colors, secondary)) {\r\n  $_primary: map.get($colors, primary);\r\n\r\n  @if(type-of($_primary) == list) {\r\n    @if($inverse) {\r\n      $_primary: nth($_primary, 2);\r\n    } @else {\r\n      $_primary: nth($_primary, 1);\r\n    }\r\n  }\r\n  $_secondary: map.get($colors, secondary);\r\n  @if(type-of($_secondary) == list) {\r\n    @if($inverse) {\r\n      $_secondary: nth($_secondary, 2);\r\n    } @else {\r\n      $_secondary: nth($_secondary, 1);\r\n    }\r\n  }\r\n\r\n  $colors: map.merge($colors, (extra: color.mix($_primary, $_secondary)));\r\n}\r\n\r\n\r\n/*\r\n*   Checking theme colors\r\n*/\r\n@include un-meta.check-colors($colors);\r\n\r\n/*\r\n*   Colors can be in the form of a list, it is required for inversion, then such colors will be substituted by swapping\r\n*/\r\n@each $color-name, $_color in $colors {\r\n    $color: $_color;\r\n    @if(type-of($color) == list) {\r\n        $color: nth($_color, 1);\r\n        @if($inverse) {\r\n          $color: nth($_color, 2);\r\n        }\r\n    }\r\n    $colors: map.merge($colors, (\r\n      #{$color-name}: $color\r\n    ));\r\n}\r\n\r\n/*\r\n*   Determines the type of theme light or dark.\r\n*/\r\n$theme-type: 'light';\r\n@if(un-meta.is-darker(map.get($colors, 'background-color'), map.get($colors, 'text-color'))) {\r\n    $theme-type: 'dark';\r\n}\r\n","@use \"ungic.utils\" as *;\r\n@use \"ungic.meta\" as un-meta;\r\n@use \"sass:color\" as color;\r\n@use \"sass:list\";\r\n@use \"sass:map\";\r\n@use \"sass:string\";\r\n@use \"sass:math\";\r\n@use \"sass:meta\";\r\n@use \"config\" as theme;\r\n\r\n$theme: meta.module-variables(theme);\r\n\r\n@function percentToDeg($num) {    \r\n    @return math.div((strip-unit($num) * 360), 100) + 0deg;\r\n}\r\n/*\r\n*   check if the color has a palette\r\n*/\r\n@function has-palette($color-name, $tint-name: null, $silent: false) {\r\n    @if type-of($color-name) != string {\r\n        $color-name: meta.inspect($color-name);\r\n    }\r\n    @if type-of($color-name) != string {\r\n        @warn '#{$color-name} must be a registered color-name';\r\n        @return false;\r\n    }\r\n    @if not un-meta.check-color-name($color-name) {\r\n        @return false;\r\n    }\r\n    $palettes: get(palettes);\r\n    $theme-name: map.get(map.get($theme, settings), theme-name);\r\n    @if(type-of($palettes) != map) {\r\n        @if not $silent {\r\n            @warn '#{$theme-name} theme is no palette.';\r\n            @if $tint-name {\r\n                @warn '#{$tint-name} tint palette is required for #{$color-name} color.';\r\n            }\r\n        }\r\n        @return false;\r\n    }\r\n    @if not map.has-key($palettes, $color-name) {\r\n        @if not $silent {\r\n            @warn 'The palette for #{$color-name} color was not specified.';\r\n            @if $tint-name {\r\n                @warn '#{$tint-name} tint palette is required for #{$color-name} color.';\r\n            }\r\n        }\r\n        @return false;\r\n    }\r\n    @if type-of(map.get($palettes, $color-name)) != map {\r\n         @if not $silent {\r\n            @warn 'The palette of #{$color-name} color must be a map.';\r\n            @if $tint-name {\r\n                @warn '#{$tint-name} tint palette is required for #{$color-name} color.';\r\n            }\r\n        }\r\n        @return false;\r\n    }\r\n    @return true;\r\n}\r\n\r\n/*\r\n*   check if a tint exists in the palette\r\n*/\r\n@function has-palette-tint($color-name, $tint-name, $silent: false) {\r\n    $palettes: get(palettes);\r\n    $palette: map.get($palettes, $color-name);\r\n    @if not map.has-key($palette, $tint-name) {\r\n        @if not $silent {\r\n            @warn '#{$tint-name} tint palette for #{$color-name} color not specified';\r\n        }\r\n        @return false;\r\n    } @else {\r\n        @return true;\r\n    }\r\n}\r\n\r\n/*\r\n*   Get color from palette\r\n*/\r\n@function palette($color-name, $tint-name, $hue-offset: 0) {\r\n    @if type-of($color-name) != string {\r\n        $color-name: meta.inspect($color-name);\r\n    }\r\n    @if $color-name == \"grey\" {\r\n        $color-name: \"gray\";\r\n    }\r\n    @if has-palette($color-name, $tint-name) {\r\n        $palettes: get(palettes);\r\n        $palette: map.get($palettes, $color-name);\r\n        @if not map.has-key($palette, $tint-name) {\r\n            @warn '#{$tint-name} tint palette for #{$color-name} color not specified';\r\n            @return colors($color-name);\r\n        }\r\n        $color: map.get($palette, $tint-name);\r\n        @return color.adjust($color, $hue: percentToDeg($hue-offset));\r\n    } @else {\r\n        @if type-of($color-name) != string {\r\n            @return transparent;\r\n        }\r\n        @if not un-meta.check-color-name($color-name) {\r\n            @return transparent;\r\n        }\r\n        @return colors($color-name);\r\n    }\r\n}\r\n\r\n/*\r\n*   Color lighten method\r\n*   Lightness control\r\n*/\r\n@function lighten($color, $intensity) {\r\n    @if type-of($color) == string {\r\n        $color: colors($color);\r\n    }\r\n    @if type-of($color) != color {\r\n        @warn \"#{$color} is not a color\";\r\n        @return '';\r\n    }\r\n    @if math.is-unitless($intensity) {\r\n        $intensity: math.percentage($intensity);\r\n    }\r\n    $relative-theme: theme-config(relative-light-limit);\r\n    @if not $relative-theme {\r\n        @return color.scale($color, $lightness: $intensity);\r\n    }\r\n    $color: un-meta.hsl($color);\r\n    $h: list.nth($color, 1);\r\n    $s: list.nth($color, 2);\r\n    $l: list.nth($color, 3);\r\n\r\n    $text-color: colors(text-color);\r\n    $background-color: colors(background-color);\r\n    $light-color: un-meta.lightest($background-color, $text-color);\r\n\r\n    $d: list.nth(un-meta.hsl($light-color), 3);\r\n    $l: math.div((($d - $l) * $intensity), 100) + $l;\r\n    @return hsl($h, $s * 1%, strip-unit($l) * 1%);\r\n}\r\n\r\n/*\r\n*   Color darken method\r\n*   Lightness control\r\n*/\r\n@function darken($color, $intensity) {\r\n    $intensity: math.abs($intensity);\r\n    @if type-of($color) == string {\r\n        $color: colors($color);\r\n    }\r\n    @if type-of($color) != color {\r\n        @warn \"#{$color} is not a color\";\r\n        @return '';\r\n    }\r\n    @if math.is-unitless($intensity) {\r\n        $intensity: math.percentage($intensity);\r\n    }\r\n    $relative-theme: theme-config(relative-light-limit);\r\n    @if not $relative-theme {\r\n        @return color.scale($color, $lightness: negative($intensity));\r\n    }\r\n    $color: un-meta.hsl($color);\r\n    $h: list.nth($color, 1);\r\n    $s: list.nth($color, 2);\r\n    $l: list.nth($color, 3);\r\n\r\n    $text-color: colors(text-color);\r\n    $background-color: colors(background-color);\r\n    $dark-color: un-meta.darkest($background-color, $text-color);\r\n    $d: list.nth(un-meta.hsl($dark-color), 3);\r\n    $l: $l - math.div((($l - $d) * $intensity), 100);\r\n    @return hsl($h, $s * 1%, strip-unit($l) * 1%);\r\n}\r\n\r\n/*\r\n*   Lightening method with inversion support\r\n*   Lightness control\r\n*/\r\n@function lightness($color, $intensity) {\r\n    @if strip-unit($intensity) < 0 {\r\n        @if get(theme-type) == light {\r\n            @return darken($color, $intensity * -1);\r\n        } @else {\r\n            @return lighten($color, $intensity * -1);\r\n        }\r\n    } @else {\r\n        @if get(theme-type) == light {\r\n            @return lighten($color, $intensity);\r\n        } @else {\r\n            @return darken($color, $intensity);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   Brightening method with inversion support\r\n*   Saturation control\r\n*/\r\n@function brightness($color, $intensity, $hue-offset: 0, $saturation: 0) {\r\n    @if $intensity < 0 {\r\n        @if get(theme-type) == light {\r\n            @return dim($color, $intensity * -1, $hue-offset, $saturation);\r\n        } @else {\r\n            @return brighten($color, $intensity * -1, $hue-offset, $saturation);\r\n        }\r\n    } @else {\r\n        @if get(theme-type) == light {\r\n            @return brighten($color, $intensity, $hue-offset, $saturation);\r\n        } @else {\r\n            @return dim($color, $intensity, $hue-offset, $saturation);\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   Method for dimming color\r\n*   Saturation control\r\n*/\r\n@function dim($color, $intensity, $hue-offset: 0, $saturation: 0) {\r\n    @if type-of($color) == string {\r\n        $color: colors($color);\r\n    }\r\n    @if type-of($color) != color {\r\n        @warn \"#{$color} is not a color\";\r\n        @return '';\r\n    }\r\n    $intensity: math.abs($intensity);\r\n    @if math.is-unitless($intensity) {\r\n        $intensity: math.percentage($intensity);\r\n    }\r\n    $options: (\r\n        offset: 0\r\n    );\r\n    @if type-of(theme-config(brightness)) == map {\r\n        $options: map.merge($options, theme-config(brightness));\r\n    }\r\n\r\n    $offset: map.get($options, offset);\r\n    @if(map.has-key($options, offset-dim)) {\r\n        $offset: map.get($options, offset-dim);\r\n    }\r\n\r\n    @if type-of($offset) == list {\r\n        $type: get(theme-type);\r\n        @if($type == light) {\r\n            $offset: list.nth($offset, 1);\r\n        } @else {\r\n            $offset: list.nth($offset, 2);\r\n        }\r\n    }\r\n    @if $hue-offset != 0 {\r\n        $offset: $hue-offset;\r\n    } @else {\r\n        $offset: math.div($offset * strip-unit($intensity), 100);\r\n    }\r\n\r\n    $color: color.adjust(darken($color, $intensity), $hue: percentToDeg($offset));\r\n    $hsl: un-meta.hsl($color);\r\n\r\n    $s: list.nth($hsl, 2) - math.div((100 - list.nth($hsl, 2)) * strip-unit($intensity), 100);\r\n    $result: hsl(list.nth($hsl, 1), $s * 1%, list.nth($hsl, 3) * 1%);\r\n\r\n    $change-saturation: $saturation;\r\n    @if $change-saturation == 0 {\r\n        @if map.has-key($options, saturation) {\r\n            $change-saturation: map.get($options, saturation);\r\n        }\r\n        @if map.has-key($options, saturation-dim) {\r\n            $change-saturation: map.get($options, saturation-dim);\r\n        }\r\n    }\r\n    @if $change-saturation != 0 {\r\n        @if type-of($change-saturation) == list {\r\n            $type: get(theme-type);\r\n            @if($type == light) {\r\n                $change-saturation: list.nth($change-saturation, 1);\r\n            } @else {\r\n                $change-saturation: list.nth($change-saturation, 2);\r\n            }\r\n        }\r\n        $result: color.scale($result, $saturation: $change-saturation + 0%);\r\n    }\r\n    @return $result;\r\n}\r\n\r\n/*\r\n*   Method of increasing the brightness of the color\r\n*   Saturation control\r\n*/\r\n@function brighten($color, $intensity, $hue-offset: 0, $saturation: 0) {\r\n    @if type-of($color) == string {\r\n        $color: colors($color);\r\n    }\r\n    @if type-of($color) != color {\r\n        @warn \"#{$color} is not a color\";\r\n        @return '';\r\n    }\r\n    $intensity: math.abs($intensity);\r\n    @if math.is-unitless($intensity) {\r\n        $intensity: math.percentage($intensity);\r\n    }\r\n    $options: (\r\n        offset: -20deg\r\n    );\r\n    @if type-of(theme-config(brightness)) == map {\r\n        $options: map.merge($options, theme-config(brightness));\r\n    }\r\n    $offset: map.get($options, offset);\r\n    @if(map.has-key($options, offset-brighten)) {\r\n        $offset: map.get($options, offset-brighten);\r\n    }\r\n\r\n    @if type-of($offset) == list {\r\n        $type: get(theme-type);\r\n        @if($type == light) {\r\n            $offset: list.nth($offset, 1);\r\n        } @else {\r\n            $offset: list.nth($offset, 2);\r\n        }\r\n    }\r\n    @if $hue-offset != 0 {\r\n        $offset: $hue-offset;\r\n    } @else {\r\n        $offset: math.div($offset * strip-unit($intensity), 100);\r\n    }\r\n\r\n    $color: color.adjust(lighten($color, $intensity), $hue: percentToDeg($offset));\r\n    $hsl: un-meta.hsl($color);\r\n\r\n    $result: hsl(list.nth($hsl, 1), list.nth($hsl, 2) * 1%, list.nth($hsl, 3) * 1%);\r\n\r\n    $change-saturation: $saturation;\r\n    @if $change-saturation == 0 {\r\n        @if map.has-key($options, saturation) {\r\n            $change-saturation: map.get($options, saturation);\r\n        }\r\n        @if map.has-key($options, saturation-brighten) {\r\n            $change-saturation: map.get($options, saturation-brighten);\r\n        }\r\n    }\r\n    @if $change-saturation != 0 {\r\n        @if type-of($change-saturation) == list {\r\n            $type: get(theme-type);\r\n            @if($type == light) {\r\n                $change-saturation: list.nth($change-saturation, 1);\r\n            } @else {\r\n                $change-saturation: list.nth($change-saturation, 2);\r\n            }\r\n        }\r\n        $result: color.scale($result, $saturation: $change-saturation + 0%);\r\n    }\r\n    @return $result;\r\n}\r\n\r\n/*\r\n*   Get a tint for the color\r\n*/\r\n@function tint($color, $offset) {\r\n    $amount: $offset;\r\n    $options: (\r\n        light-odd-offset: 8,\r\n        light-even-offset: 4,\r\n        hue-offset: 16,\r\n        saturation-odd-offset: 8,\r\n        saturation-even-offset: 4\r\n    );\r\n    @if theme-config(tint) and type-of(theme-config(tint)) == map {\r\n        $options: map.merge($options, theme-config(tint));\r\n    }\r\n    @if type-of($color) == string {\r\n        $color: colors($color);\r\n    }\r\n    @if type-of($color) != color {\r\n        @warn \"#{$color} is not a color\";\r\n        @return '';\r\n    }\r\n    @if strip-unit($amount) == 0 {\r\n        @return $color;\r\n    }\r\n    $hsl: un-meta.hsl($color);\r\n    $light: list.nth($hsl, 3);\r\n    $saturation: list.nth($hsl, 2);\r\n    $light-odd-offset: map.get($options, light-odd-offset);\r\n    $light-even-offset: map.get($options, light-even-offset);\r\n    @if math.abs($amount) % 2 != 0 {\r\n        @if math.ceil($light) + $light-odd-offset <= 100 {\r\n            $light: $light + $light-odd-offset;\r\n        } @else {\r\n            $light: $light - $light-odd-offset;\r\n        }\r\n    } @else {\r\n        @if math.ceil($light) + $light-even-offset <= 100 {\r\n            $light: $light + $light-even-offset;\r\n        } @else {\r\n            $light: $light - $light-even-offset;\r\n        }\r\n    }\r\n\r\n    $saturation-even-offset: map.get($options, saturation-even-offset);\r\n    $saturation-odd-offset: map.get($options, saturation-odd-offset);\r\n    @if math.abs($amount) % 2 != 0 {\r\n        @if math.ceil($saturation) + $saturation-odd-offset <= 100 {\r\n            $saturation: $saturation + $saturation-odd-offset;\r\n        } @else {\r\n            $saturation: $saturation - $saturation-odd-offset;\r\n        }\r\n    } @else {\r\n        @if math.ceil($saturation) + $saturation-even-offset <= 100 {\r\n            $saturation: $saturation + $saturation-even-offset;\r\n        } @else {\r\n            $saturation: $saturation - $saturation-even-offset;\r\n        }\r\n    }\r\n    $color: hsl(list.nth($hsl, 1), strip-unit($saturation) * 1%, strip-unit($light) * 1%);\r\n    @return color.adjust($color, $hue: percentToDeg($amount * map.get($options, hue-offset)));\r\n}\r\n\r\n/*\r\n*   Get theme config\r\n*/\r\n@function theme-config($key:'') {\r\n    $config: get(config);\r\n    @if map.has-key($config, $key) {\r\n        @return map.get($config, $key);\r\n    } @else if $key != '' {\r\n        @return false;\r\n    }\r\n    @return $config;\r\n}\r\n\r\n/*\r\n*   Get values by key from $theme\r\n*/\r\n@function get($key:'') {\r\n    @if map.has-key($theme, $key) {\r\n        @return map.get($theme, $key);\r\n    } @else if $key != '' {\r\n        @return null;\r\n    }\r\n    @return map.remove($theme, settings);\r\n}\r\n\r\n/*\r\n*   Return value relative to active theme type\r\n*/\r\n@function subs($light, $dark: null) {\r\n    @if $dark == null and type-of($light) == number {\r\n        @if get(inverse) {\r\n            @return $light * -1;\r\n        } @else {\r\n            $dark: $light;\r\n        }\r\n    } @else if $dark == null {\r\n        @warn \"The second argument is not specified, for a dark theme the value will be applied as for a light!\";\r\n        $dark: $light;\r\n    }\r\n    $type: get(theme-type);\r\n    @if $type == light {\r\n        @return $light;\r\n    }\r\n    @return $dark;\r\n}\r\n\r\n/*\r\n*   Return value relative to specific theme\r\n*/\r\n@function subs-theme($theme_name, $value, $default: null) {\r\n    @if get('name') == $theme_name {\r\n        @return $value\r\n    } @else {\r\n        @return $default;\r\n    }\r\n}\r\n\r\n/*\r\n*   Get theme colors or specific color\r\n*/\r\n@function colors($color: '') {\r\n    @if type-of($color) != string {\r\n        $color: meta.inspect($color);\r\n    }\r\n    @if $color == \"gray\" or $color == \"grey\" {\r\n        @return gray();\r\n    }\r\n    $colors: get(colors);\r\n    @if map.has-key($colors, $color) {\r\n        @return map.get($colors, $color);\r\n    } @else if $color != '' {\r\n        @warn '#{$color} is not a registered color';\r\n        @return transparent;\r\n    }    \r\n    @return $colors;\r\n}\r\n\r\n/*\r\n*   Get gray color with $offset\r\n*/\r\n@function _gray($offset:0) {\r\n    @if type-of($offset) == string {\r\n        @return palette(\"gray\", $offset);\r\n    }\r\n    $saturation: 0;\r\n    $hue: 0;\r\n    $theme-config: get(config);\r\n    @if map.has-key($theme-config, gray) and type-of(map.get($theme-config, gray)) == map {\r\n        @if map.has-key(map.get($theme-config, gray), saturation) {\r\n            $saturation: map.get(map.get($theme-config, gray), saturation);\r\n            @if type-of($saturation) == list {\r\n                $type: get(theme-type);\r\n                @if($type == light) {\r\n                  $saturation: list.nth($saturation, 1);\r\n                } @else {\r\n                  $saturation: list.nth($saturation, 2);\r\n                }\r\n            }\r\n        }\r\n        @if map.has-key(map.get($theme-config, gray), hue) {\r\n            $hue: map.get(map.get($theme-config, gray), hue);\r\n            @if type-of($hue) == list {\r\n                $type: get(theme-type);\r\n                @if($type == light) {\r\n                    $hue: list.nth($hue, 1);\r\n                } @else {\r\n                    $hue: list.nth($hue, 2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @if type-of($hue) == color {\r\n        $hue: list.nth(un-meta.hsl($hue), 1);\r\n    }\r\n\r\n    $color: color.adjust(\r\n        color.grayscale(color.mix(colors(background-color), colors(text-color))),\r\n        $saturation: strip-unit($saturation) * 1%\r\n    );\r\n\r\n    $hsl: un-meta.hsl($color);\r\n\r\n    $color: hsl($hue, list.nth($hsl, 2) * 1%, list.nth($hsl, 3) * 1%);\r\n    @return lightness($color, $offset);\r\n}\r\n@function gray($offset:0) {\r\n    @if get(colors-vars-mode) {\r\n        @return color-var('gray', $offset);\r\n    } @else {\r\n        @return _gray($offset);\r\n    }\r\n}\r\n\r\n/*\r\n*   Returns gray color as var\r\n*/\r\n@function gray-var($offset:0) {\r\n    @return color-var('gray', $offset, 0, 0);\r\n}\r\n\r\n/*\r\n*   Returns gray color as var with rgb value list\r\n*/\r\n@function gray-rgb($offset:0) {\r\n    @if get(colors-vars-mode) {\r\n        @return color-var('gray', $offset, 0, 0, true);\r\n    } @else {\r\n        @return _gray($offset);\r\n    }\r\n}\r\n\r\n/*\r\n*   The main function for working with colors of theme\r\n*   $color-name - get color by $color-name\r\n*   $color-tint - may be a tint from the palette or $offset\r\n*/\r\n\r\n@function _color($color-name, $color-tint: 0, $hue-offset: 0, $saturation: 0) {\r\n    @if type-of($color-name) != string {\r\n        $color-name: meta.inspect($color-name);\r\n    }\r\n    @if type-of($color-tint) == string {\r\n        @return palette($color-name, $color-tint, $hue-offset);\r\n    }\r\n    @if type-of($color-tint) == list {\r\n        $tint-id: nth($color-tint, 1);\r\n        @if(has-palette($color-name, $tint-id, true)) {\r\n            @if(has-palette-tint($color-name, $tint-id, true)) {\r\n                @return palette($color-name, $tint-id, $hue-offset);\r\n            }\r\n        }\r\n        $color-tint: nth($color-tint, 2);\r\n    }\r\n    @if $color-name == \"gray\" or $color-name == \"grey\" {\r\n        @return _gray($color-tint);\r\n    }\r\n    @if type-of($color-name) != string {\r\n        @warn '#{$color-name} must be a registered color-name';\r\n        @return transparent;\r\n    }\r\n    @if not un-meta.check-color-name($color-name) {\r\n        @return transparent;\r\n    }\r\n    $offset: 0;\r\n    @if $hue-offset != 0 and type-of($hue-offset) == number {\r\n        $offset: $hue-offset;\r\n    } @else if type-of($hue-offset) != number  {\r\n        @warn '$hue-offset parameter must be a number from -1 to 1';\r\n        @return transparent;\r\n    }\r\n    @if type-of($color-tint) != number {\r\n        @warn '$color-tint parameter must be a number from -1 to 1';\r\n        @return transparent;\r\n    }\r\n    @return brightness($color-name, $color-tint, $offset, $saturation);\r\n}\r\n@function color($color-name, $color-tint: 0, $hue-offset: 0, $saturation: 0) {\r\n    @if get(colors-vars-mode) {\r\n        @return color-var($color-name, $color-tint, $hue-offset, $saturation);\r\n    } @else {\r\n        @return _color($color-name, $color-tint, $hue-offset, $saturation);\r\n    }\r\n}\r\n\r\n/*\r\n*   Returns color as var\r\n*/\r\n@function color-var($color-name, $color-tint: 0, $hue-offset: 0, $saturation: 0, $rgb-list: false) {\r\n    $color: _color($color-name, $color-tint, $hue-offset, $saturation);\r\n    $colorName: $color-name;\r\n    @if($rgb-list) {\r\n        $color: \"#{color.red($color)}, #{color.green($color)}, #{color.blue($color)}\";\r\n        $colorName: \"#{$colorName}-rgb\";\r\n    }\r\n    $save-color: ungic-save-color((\r\n        'color': meta.inspect($color),\r\n        'colorName': meta.inspect($colorName),\r\n        'colorTint': strip-unit($color-tint),\r\n        'hueOffset': strip-unit($hue-offset),\r\n        'saturation': strip-unit($saturation),\r\n        'inverseMode': get('inverse-mode'),\r\n        'inverseSupport': get('inverse-support'),\r\n        'themeName': meta.inspect(get('name')),\r\n        'themePrefix': get('theme-prefix')\r\n    ));\r\n    @return var(string.unquote($save-color));\r\n}\r\n\r\n/*\r\n*   Returns color as var with rgb value list\r\n*/\r\n@function color-rgb($color-name, $color-tint: 0, $hue-offset: 0, $saturation: 0) {\r\n    @if get(colors-vars-mode) {\r\n        @return color-var($color-name, $color-tint, $hue-offset, $saturation, true);\r\n    } @else {\r\n        @return _color($color-name, $color-tint, $hue-offset, $saturation);\r\n    }\r\n}","@use \"sass:map\";\r\n/*\r\n*   Set default variables\r\n*/\r\n\r\n$project: () !default;\r\n\r\n/*\r\n*   Customize the theme configuration\r\n*/\r\n@use \"config\" with (\r\n    $settings: map.get($project, theme),\r\n    $inverse-mode: map.get($project, inverse-mode),\r\n    $theme-prefix: map.get($project, theme-prefix)\r\n);\r\n\r\n@forward \"functions\";","@use \"functions\" as *;\r\n@use \"init\" as config;\r\n@use \"sass:map\";\r\n@use \"ungic.meta\"as un-meta;\r\n\r\n\r\n/*\r\n*  Generate css rules for theme inversion only\r\n*/\r\n@mixin is-inverse {\r\n    $inverse-support: get(inverse-support);\r\n    @if not $inverse-support {\r\n        @warn 'Inversion mode is disabled, rules for inversion will be ignored';\r\n    } @else {    \r\n        $inverse: get(inverse);\r\n        $inverse-mode: get(inverse-mode);\r\n        // Если данный режим не является инверсией, но режим инверсии по умолчанию активен.\r\n        @if $inverse and not $inverse-mode {\r\n            @include un-meta.wrapsys('[un-prefix=\"{{[data-ungic-root]:not(.un-inverse)}}\"]') {\r\n                @content;\r\n            }\r\n        } @else if $inverse {\r\n            @include un-meta.wrapsys('[un-save-inverse-props]') {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   To make css rules by theme type (dark / light)\r\n*/\r\n@mixin is-type($type) {    \r\n    $inverse-support: get(inverse-support);\r\n    @if not $inverse-support {\r\n        @if get(theme-type) == $type {\r\n            @content;\r\n        }\r\n    } @else {\r\n        $inverse-mode: get(inverse-mode);\r\n    \r\n        @if get(theme-type) == $type and not $inverse-mode {\r\n            @include un-meta.wrapsys('[un-prefix=\"{{[data-ungic-root]:not(.un-inverse)}}\"]') {\r\n                @content;\r\n            }\r\n        } @else if $inverse-mode and get(theme-type) == $type {\r\n            @include un-meta.wrapsys('[un-save-inverse-props]') {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@mixin is-dark() {\r\n    @include is-type(dark) {\r\n        @content\r\n    }\r\n}\r\n\r\n@mixin is-light() {\r\n    @include is-type(light) {\r\n        @content\r\n    }\r\n}\r\n\r\n/*\r\n*   To make css rules by theme name\r\n*/\r\n@mixin is-theme($theme-name) {\r\n    $theme-prefix: map.get(config.$project, theme-prefix);\r\n    $active-name: get(name);\r\n    @if $theme-name == $active-name {\r\n        @if $theme-name == 'default' {\r\n            @include un-meta.wrapsys('[un-save-props] [data-ungic-root]:not([class*=\"un-theme\"])') {\r\n                @content;\r\n            }\r\n        } @else {\r\n            @include un-meta.wrapsys('[un-save-props]') {\r\n                @content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   Ignore inversion\r\n*/\r\n@mixin skip-inverse {    \r\n    @include un-meta.wrapsys('[un-inverse-skip]') {\r\n        @content;\r\n    }\r\n}\r\n\r\n/*\r\n*   Custom method for manual inversion control\r\n*/\r\n@mixin custom-inverse-prefix($prefix) {\r\n    $inverse-support: get(inverse-support);\r\n    @if not $inverse-support {\r\n        @warn 'Inversion mode is disabled, rules for inversion will be ignored';\r\n    } @else {\r\n        @include un-meta.wrapsys(\"[un-prefix='{{un-custom-prefix-#{$prefix}}}']\") {\r\n            @content;\r\n        }\r\n    }\r\n}","/*------------------------------------------\r\n*   Optional project file\r\n--------------------------------------------\r\n*   Module: ungic.project\r\n*   Desc: This file contains any CSS properties that can be applied when styling components.\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-project\r\n*/\r\n\r\n@use \"ungic.utils\" as utils;\r\n@use \"ungic.theme\" as theme;\r\n\r\n$font-size: 16px;\r\n$line-height:1.5;\r\n$font-family: utils.rtl-prepend('-apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"', 'Heebo', ',');\r\n$padding: 1.2em;\r\n$box-shadow: none;\r\n$border-radius: 3px;\r\n\r\n// Outline\r\n$outline-color: theme.color(system, .6);\r\n$outline-style: ridge;\r\n$outline-width: 2px;\r\n$outline-offset: 2px;\r\n\r\n// Border\r\n$border-width: 2px;\r\n$border-style: solid;\r\n$border-color: theme.gray(.8);","/*\r\n*   Functions for calculating various project and component properties\r\n*/\r\n\r\n@use \"ungic.default-properties\" as default-props;\r\n@use \"sass:map\";\r\n@use \"sass:string\" as str;\r\n@use \"sass:meta\";\r\n@use \"sass:math\";\r\n@use \"sass:list\";\r\n@use \"ungic.utils\" as *;\r\n\r\n@use \"ungic.theme\" as theme;\r\n\r\n@use \"ungic.project.properties\" as properties;\r\n\r\n$project_props: meta.module-variables(properties);\r\n\r\n$properties: $project_props !default;\r\n\r\n$default-properties: meta.module-variables(default-props);\r\n\r\n$all_props: merge($default-properties, $project_props);\r\n\r\n$private_properties: $properties;\r\n\r\n@use \"ungic.meta.property-handlers\" as *;\r\n\r\n\r\n@function handler($prop, $args...) {\r\n  @if meta.function-exists($prop) {\r\n    @if list.length($args) == 0 {\r\n      @return meta.call(meta.get-function($prop));\r\n    }\r\n    @return meta.call(meta.get-function($prop),$args...);\r\n  } @else {\r\n    @if not map.has-key($all_props, $prop) {\r\n      @if str.index($prop, '-') {\r\n        $property: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if not map.has-key($all_props, $property) {\r\n          @warn '#{$prop} property not specified';\r\n          @return \"\";\r\n        }\r\n      } @else {\r\n        @warn '#{$prop} property not specified';\r\n        @return \"\";\r\n      }\r\n    } @else {\r\n      @if str.index($prop, line-height) {\r\n        @return handler(font, line-height);\r\n      }\r\n      @if str.index($prop, border) and str.index($prop, radius) {\r\n        $stripped: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        $stripped: str.slice($stripped, 1, str.index($stripped, \"radius\") - 2);\r\n        @return handler(border-radius, $stripped);\r\n      } @else if str.index($prop, border) == 1 {\r\n        $methods: (color, width, style);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(border, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, padding) == 1 {\r\n        @return handler(padding, str.slice($prop, str.index($prop, \"-\") + 1, -1));\r\n      }\r\n      @if str.index($prop, margin) == 1 {\r\n        @return handler(margin, str.slice($prop, str.index($prop, \"-\") + 1, -1));\r\n      }\r\n      @if str.index($prop, font) == 1 {\r\n        $methods: (family, style, size, variant, weight);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(font, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, background) == 1 {\r\n        $methods: (attachment, color, position, image, repeat);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(background, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, list-style) == 1 {\r\n        $methods: (type, position, image);\r\n        $method: str.slice($prop, str.length(\"list-style-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(list-style, $method);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @return map.get($all_props, $prop);\r\n}\r\n\r\n@function border($param: false) {\r\n    $border: (\r\n        width: default-props.$border-width,\r\n        style: default-props.$border-style,\r\n        color: default-props.$border-color\r\n    );\r\n\r\n    $border: border-handler($border, $properties);\r\n    $border: border-handler($border, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $border;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($border, $param) {\r\n        @return map.get($border, $param);\r\n    }\r\n    $border-width: map.get($border, width);\r\n    $border-style: map.get($border, style);\r\n    $border-color: map.get($border, color);\r\n    $output: ();\r\n\r\n    @if($border-style == none) {\r\n        @return none;\r\n    }\r\n    @if($border-width == 0) {\r\n        @return 0;\r\n    }\r\n\r\n    @if $border-width != inherit {\r\n        $output: list.append($output, $border-width);\r\n    }\r\n    @if $border-style != inherit {\r\n        $output: list.append($output, $border-style);\r\n    }\r\n    @if $border-color != inherit {\r\n        $output: list.append($output, $border-color);\r\n    }\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n    @return $output;\r\n}\r\n\r\n@function padding($param: false) {\r\n\r\n    // Parse common property of project\r\n    $padding: parse-pm-props($project_props, padding);\r\n\r\n    // Replace individual props of project\r\n    $padding: pm-inv-replace($project_props, $padding, padding);\r\n\r\n    // Replace common property of project to component props\r\n    @if map.has-key($properties, padding) {\r\n      $padding: parse-pm-props($properties, padding);\r\n    }\r\n\r\n    // Replace individual props of component\r\n    $padding: pm-inv-replace($private_properties, $padding, padding);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $padding;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($padding, $param) {\r\n        @return map.get($padding, $param);\r\n    }\r\n    $padding-top: map.get($padding, top);\r\n    $padding-right: map.get($padding, right);\r\n    $padding-bottom: map.get($padding, bottom);\r\n    $padding-left: map.get($padding, left);\r\n    @if list.index(map.values($padding), inherit) {\r\n        @return inherit;\r\n    }\r\n    @if $padding-top == $padding-right and $padding-bottom == $padding-left and $padding-left == $padding-top {\r\n        @return $padding-top;\r\n    }\r\n    @if $padding-top == $padding-bottom and $padding-left == $padding-right {\r\n        @return $padding-top $padding-left;\r\n    }\r\n    @if $padding-left == $padding-right {\r\n        @return $padding-top $padding-left $padding-bottom;\r\n    }\r\n    @return (\r\n        $padding-top\r\n        $padding-right\r\n        $padding-bottom\r\n        $padding-left\r\n    );\r\n}\r\n\r\n@function margin($param: false) {\r\n    // Parse common property of project\r\n    $margin: parse-pm-props($project_props, margin);\r\n\r\n    // Replace individual props of project\r\n    $margin: pm-inv-replace($project_props, $margin, margin);\r\n\r\n    // Replace common property of project to component props\r\n    @if map.has-key($properties, margin) {\r\n      $margin: parse-pm-props($properties, margin);\r\n    }\r\n\r\n    // Replace individual props of component\r\n    $margin: pm-inv-replace($private_properties, $margin, margin);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $margin;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($margin, $param) {\r\n        @return map.get($margin, $param);\r\n    }\r\n    $margin-top: map.get($margin, top);\r\n    $margin-right: map.get($margin, right);\r\n    $margin-bottom: map.get($margin, bottom);\r\n    $margin-left: map.get($margin, left);\r\n    @if list.index(map.values($margin), inherit) {\r\n        @return inherit;\r\n    }\r\n    @if $margin-top == $margin-right and $margin-bottom == $margin-left and $margin-left == $margin-top {\r\n        @return $margin-top;\r\n    }\r\n    @if $margin-top == $margin-bottom and $margin-left == $margin-right {\r\n        @return $margin-top $margin-left;\r\n    }\r\n    @if $margin-left == $margin-right {\r\n        @return $margin-top $margin-left $margin-bottom;\r\n    }\r\n    @return (\r\n        $margin-top\r\n        $margin-right\r\n        $margin-bottom\r\n        $margin-left\r\n    );\r\n}\r\n\r\n@function font($param: false) {\r\n    $font: (\r\n        style: default-props.$font-style,\r\n        variant: default-props.$font-variant,\r\n        weight: default-props.$font-weight,\r\n        size: default-props.$font-size,\r\n        line-height: default-props.$line-height,\r\n        family: default-props.$font-family\r\n    );\r\n\r\n    $font: font-handler($font, $properties);\r\n    $font: font-handler($font, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $font;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($font, $param) {\r\n        @return map.get($font, $param);\r\n    }\r\n\r\n    $font-size: map.get($font, size);\r\n    $font-variant: map.get($font, variant);\r\n    $font-weight: map.get($font, weight);\r\n    $font-style: map.get($font, style);\r\n    $font-family: map.get($font, family);\r\n\r\n    @if $font-variant == inherit and $font-weight == inherit and $font-style == inherit and $font-family == inherit {\r\n        @return inherit;\r\n    }\r\n\r\n    $output: ();\r\n\r\n    @if $font-style != inherit {\r\n        $output: list.append($output, $font-style, space);\r\n    }\r\n    @if $font-variant != inherit {\r\n        $output: list.append($output, $font-variant, space);\r\n    }\r\n    @if $font-weight != inherit {\r\n        $output: list.append($output, $font-weight, space);\r\n    }\r\n    $output: list.append($output, str.unquote(map.get($font, 'size') + \"/\"+ map.get($font, 'line-height')), space);\r\n    @if $font-family != inherit {\r\n        $output: list.append($output, $font-family, space);\r\n    }    \r\n    @return $output;\r\n}\r\n\r\n@function background($param: false) {    \r\n    $background: (\r\n        attachment: default-props.$background-attachment,\r\n        color: theme.color(background-color),\r\n        image: default-props.$background-image,\r\n        position: default-props.$background-position,\r\n        repeat: default-props.$background-repeat\r\n    );\r\n\r\n    $background: background-handler($background, $properties);\r\n    $background: background-handler($background, $private_properties);\r\n\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $background;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($background, $param) {\r\n        @return map.get($background, $param);\r\n    }\r\n\r\n    @if(map.get($background, image) == default-props.$background-image) {\r\n        @return (\r\n            map.get($background, color)\r\n        );\r\n    }\r\n    $output: ();\r\n    $background-attachment: map.get($background, attachment);\r\n    $background-repeat: map.get($background, repeat);\r\n    $background-position: meta.inspect(map.get($background, position));\r\n\r\n    @if $background-attachment != default-props.$background-attachment {\r\n        $output: list.append($output, $background-attachment);\r\n    }\r\n\r\n    $output: list.append($output, map.get($background, color));\r\n    $output: list.append($output, map.get($background, image));\r\n\r\n\r\n    @if $background-position != meta.inspect(default-props.$background-position) {\r\n        $output: list.append($output, $background-position);\r\n    }\r\n    @if $background-repeat != default-props.$background-repeat {\r\n        $output: list.append($output, $background-repeat);\r\n    }\r\n\r\n    @return $output;\r\n}\r\n\r\n@function list-style($param:false) {\r\n    $list: (\r\n        type: default-props.$list-style-type,\r\n        position: default-props.$list-style-position,\r\n        image: default-props.$list-style-image,\r\n    );\r\n\r\n    $list: list-style-handler($list, $properties);\r\n    $list: list-style-handler($list, $private_properties);\r\n\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $list;\r\n    }\r\n    @if type-of($param) == string and map.has-key($list, $param) {\r\n        @return map.get($list, $param);\r\n    }\r\n\r\n    $output: ();\r\n\r\n    @if map.has-key($list, type) and map.get($list, type) != inherit {\r\n        $output: list.append($output, map.get($list, type), space);\r\n    }\r\n\r\n    @if map.get($list, position) != default-props.$list-style-position and map.get($list, position) != inherit {\r\n        $output: list.append($output, map.get($list, position), space);\r\n    }\r\n\r\n    @if map.get($list, image) != default-props.$list-style-image and map.get($list, image) != inherit {\r\n        $output: list.append($output, map.get($list, image), space);\r\n    }\r\n\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n\r\n    @return $output;\r\n}\r\n\r\n@function border-radius($param: false) {\r\n    $radius: (top-left:0, top-right:0, bottom-right:0, bottom-left:0);\r\n\r\n    $radius: border-radius-handler($radius, $properties);\r\n    $radius: border-radius-handler($radius, $private_properties);\r\n\r\n    @if list.index(map.values($radius), inherit) {\r\n        @return inherit;\r\n    }\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $radius;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($radius, $param) {\r\n        @return map.get($radius, $param);\r\n    }\r\n    $top-left: map.get($radius, top-left);\r\n    $top-right: map.get($radius, top-right);\r\n    $bottom-left: map.get($radius, bottom-left);\r\n    $bottom-right: map.get($radius, bottom-right);\r\n    @if $top-left == $bottom-right and $bottom-left == $top-right and $bottom-left == $top-left {\r\n        @return $top-left;\r\n    } @else if $top-left == $bottom-right and $bottom-left == $top-right {\r\n        @return $top-left $bottom-left;\r\n    } @else if $top-right == $bottom-left {\r\n        @return $top-left $top-right $bottom-right;\r\n    }\r\n    @return (\r\n        $top-left\r\n        $top-right\r\n        $bottom-left\r\n        $bottom-right\r\n    );\r\n}\r\n\r\n@function overflow($param: false) {\r\n    $overflow: map.get($properties, overflow);\r\n    $overflow-x: map.get($properties, overflow-x);\r\n    $overflow-y: map.get($properties, overflow-y);\r\n    $output: $overflow;\r\n    @if $overflow-x == $overflow-y and $overflow != $overflow-x {\r\n        $output: $overflow-x;\r\n    }\r\n    @if type-of($param) == bool and $param {\r\n        @return (\r\n            overflow: $output,\r\n            overflow-x: $overflow-x,\r\n            overflow-y: $overflow-y,\r\n        );\r\n    }\r\n    @return $output;\r\n}\r\n\r\n@function outline($param: false) {\r\n    $outline: (\r\n        width: default-props.$outline-width,\r\n        style: default-props.$outline-style,\r\n        color: default-props.$outline-color\r\n    );\r\n\r\n    $outline: outline-handler($outline, $properties);\r\n    $outline: outline-handler($outline, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $outline;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($outline, $param) {\r\n        @return map.get($outline, $param);\r\n    }\r\n    $outline-width: map.get($outline, width);\r\n    $outline-style: map.get($outline, style);\r\n    $outline-color: map.get($outline, color);\r\n    $output: ();\r\n\r\n    @if($outline-style == none) {\r\n        @return none;\r\n    }\r\n    @if($outline-width == 0) {\r\n        @return 0;\r\n    }\r\n\r\n    @if $outline-width != inherit {\r\n        $output: list.append($output, $outline-width);\r\n    }\r\n    @if $outline-style != inherit {\r\n        $output: list.append($output, $outline-style);\r\n    }\r\n    @if $outline-color != inherit {\r\n        $output: list.append($output, $outline-color);\r\n    }\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n    @return $output;\r\n}","@use \"ungic.project.config\" as config;\r\n@use \"ungic.project.properties\" as properties;\r\n@use \"ungic.default-properties\" as def_properties;\r\n@use \"ungic.utils\" as utils;\r\n@use \"sass:meta\";\r\n@use \"sass:map\";\r\n@use \"./property-handlers.scss\" as property-handlers;\r\n\r\n$config: meta.module-variables(config);\r\n$properties: meta.module-variables(properties);\r\n$default_properties: meta.module-variables(def_properties);\r\n\r\n/*\r\n*   Get project config\r\n*/\r\n\r\n@function config($key: \"\", $subkey: false) {\r\n  @if map.has-key($config, $key) {\r\n    $result: map.get($config, $key);\r\n    @if $subkey and type-of($result) == map {\r\n      @if map.has-key($result, $subkey) {\r\n        @return map.get($result, $subkey);\r\n      } @else {\r\n        @return $result;\r\n      }\r\n    } @else {\r\n      @return $result;\r\n    }\r\n  } @else if $key != \"\" {\r\n    @return false;\r\n  }\r\n  @return $config;\r\n}\r\n\r\n@function properties($defaults: false) {\r\n  @if $defaults {\r\n    @return utils.merge($default_properties, $properties);\r\n  }\r\n  @return $properties;\r\n}\r\n\r\n@function props($defaults: false) {\r\n  @return properties($defaults);\r\n}\r\n\r\n@function prop($prop, $args...) {\r\n  $props: utils.merge($default_properties, $properties);\r\n  @return property-handlers.handler($prop, $args...);\r\n}","/*\r\n*\t\tFramework core file, don't change it!\r\n*\t\tYou should not change this file.\r\n*/\r\n@use \"sass:meta\";\r\n@use \"ungic.project.config\" as config;\r\n@use \"ungic.project.properties\" as properties;\r\n@forward \"ungic.project.functions\";\r\n\r\n$config: meta.module-variables(config);\r\n$properties: meta.module-variables(properties);","/*------------------------------------------\r\n*   Optional component properties file\r\n--------------------------------------------\r\n*   The configuration file, which is used in the process of styling the component, \r\n*   can contain a list of variables with the names of CSS properties, \r\n*   the values of which can be applied when writing CSS rules.\r\n*/\r\n\r\n\r\n@use \"ungic.project\" as project;\r\n@use \"ungic.utils\" as *;","/*------------------------------------------\r\n*   Optional project file\r\n--------------------------------------------\r\n*   Module: ungic.project\r\n*   Desc: This file is used to override the properties of components. To redefine a specific component, check the $cid (Component ID) variable.\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-project\r\n* -------\tDon't change this part ---------*/\r\n@use \"sass:map\";\r\n$cid: null !default;\r\n$properties: () !default;\r\n/* ---------------------------------------- */\r\n\r\n\r\n// Example:\r\n@if($cid == helloworld) {\r\n  $properties: map.merge($properties, (border-width: 4px));\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.props\r\n*   Desc: This file is part of ungic.component.props module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-props\r\n*/\r\n\r\n$properties: () !default;\r\n$private_properties: () !default;","/*\r\n*   Functions for calculating various project and component properties\r\n*/\r\n\r\n@use \"ungic.default-properties\" as default-props;\r\n@use \"sass:map\";\r\n@use \"sass:string\" as str;\r\n@use \"sass:meta\";\r\n@use \"sass:math\";\r\n@use \"sass:list\";\r\n@use \"ungic.utils\" as *;\r\n\r\n@use \"ungic.theme\" as theme;\r\n\r\n@use \"./config\" as this;\r\n\r\n$component: meta.module-variables(this);\r\n$properties: map.get($component, properties);\r\n\r\n@use \"ungic.project.properties\" as properties;\r\n\r\n$project_props: meta.module-variables(properties);\r\n\r\n$default-properties: meta.module-variables(default-props);\r\n\r\n$all_props: merge($default-properties, $properties);\r\n\r\n$private_properties: map.get($component, private-properties);\r\n\r\n@use \"ungic.meta.property-handlers\" as *;\r\n\r\n@function handler($prop, $args...) {\r\n  @if meta.function-exists($prop) {\r\n    @if list.length($args) == 0 {\r\n      @return meta.call(meta.get-function($prop));\r\n    }\r\n    @return meta.call(meta.get-function($prop),$args...);\r\n  } @else {\r\n    @if not map.has-key($all_props, $prop) {\r\n      @if str.index($prop, '-') {\r\n        $property: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if not map.has-key($all_props, $property) {\r\n          @warn '#{$prop} property not specified';\r\n          @return \"\";\r\n        }\r\n      } @else {\r\n        @warn '#{$prop} property not specified';\r\n        @return \"\";\r\n      }\r\n    } @else {\r\n      @if str.index($prop, line-height) {\r\n        @return handler(font, line-height);\r\n      }\r\n      @if str.index($prop, border) and str.index($prop, radius) {\r\n        $stripped: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        $stripped: str.slice($stripped, 1, str.index($stripped, \"radius\") - 2);\r\n        @return handler(border-radius, $stripped);\r\n      } @else if str.index($prop, border) == 1 {\r\n        $methods: (color, width, style);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(border, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, padding) == 1 {\r\n        @return handler(padding, str.slice($prop, str.index($prop, \"-\") + 1, -1));\r\n      }\r\n      @if str.index($prop, margin) == 1 {\r\n        @return handler(margin, str.slice($prop, str.index($prop, \"-\") + 1, -1));\r\n      }\r\n      @if str.index($prop, font) == 1 {\r\n        $methods: (family, style, size, variant, weight);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(font, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, background) == 1 {\r\n        $methods: (attachment, color, position, image, repeat);\r\n        $method: str.slice($prop, str.index($prop, \"-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(background, $method);\r\n        }\r\n      }\r\n      @if str.index($prop, list-style) == 1 {\r\n        $methods: (type, position, image);\r\n        $method: str.slice($prop, str.length(\"list-style-\") + 1, -1);\r\n        @if (list.index($methods, $method)) {\r\n          @return handler(list-style, $method);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @return map.get($all_props, $prop);\r\n}\r\n\r\n@function border($param: false) {\r\n    $border: (\r\n        width: default-props.$border-width,\r\n        style: default-props.$border-style,\r\n        color: default-props.$border-color\r\n    );\r\n\r\n    $border: border-handler($border, $properties);\r\n    $border: border-handler($border, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $border;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($border, $param) {\r\n        @return map.get($border, $param);\r\n    }\r\n    $border-width: map.get($border, width);\r\n    $border-style: map.get($border, style);\r\n    $border-color: map.get($border, color);\r\n    $output: ();\r\n\r\n    @if($border-style == none) {\r\n        @return none;\r\n    }\r\n    @if($border-width == 0) {\r\n        @return 0;\r\n    }\r\n\r\n    @if $border-width != inherit {\r\n        $output: list.append($output, $border-width);\r\n    }\r\n    @if $border-style != inherit {\r\n        $output: list.append($output, $border-style);\r\n    }\r\n    @if $border-color != inherit {\r\n        $output: list.append($output, $border-color);\r\n    }\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n    @return $output;\r\n}\r\n\r\n@function padding($param: false) {\r\n\r\n    // Parse common property of project\r\n    $padding: parse-pm-props($project_props, padding);\r\n\r\n    // Replace individual props of project\r\n    $padding: pm-inv-replace($project_props, $padding, padding);\r\n\r\n    // Replace common property of project to component props\r\n    @if map.has-key($properties, padding) {\r\n      $padding: parse-pm-props($properties, padding);\r\n    }\r\n\r\n    // Replace individual props of component\r\n    $padding: pm-inv-replace($private_properties, $padding, padding);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $padding;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($padding, $param) {\r\n        @return map.get($padding, $param);\r\n    }\r\n    $padding-top: map.get($padding, top);\r\n    $padding-right: map.get($padding, right);\r\n    $padding-bottom: map.get($padding, bottom);\r\n    $padding-left: map.get($padding, left);\r\n    @if list.index(map.values($padding), inherit) {\r\n        @return inherit;\r\n    }\r\n    @if $padding-top == $padding-right and $padding-bottom == $padding-left and $padding-left == $padding-top {\r\n        @return $padding-top;\r\n    }\r\n    @if $padding-top == $padding-bottom and $padding-left == $padding-right {\r\n        @return $padding-top $padding-left;\r\n    }\r\n    @if $padding-left == $padding-right {\r\n        @return $padding-top $padding-left $padding-bottom;\r\n    }\r\n    @return (\r\n        $padding-top\r\n        $padding-right\r\n        $padding-bottom\r\n        $padding-left\r\n    );\r\n}\r\n\r\n@function margin($param: false) {\r\n    // Parse common property of project\r\n    $margin: parse-pm-props($project_props, margin);\r\n\r\n    // Replace individual props of project\r\n    $margin: pm-inv-replace($project_props, $margin, margin);\r\n\r\n    // Replace common property of project to component props\r\n    @if map.has-key($properties, margin) {\r\n      $margin: parse-pm-props($properties, margin);\r\n    }\r\n\r\n    // Replace individual props of component\r\n    $margin: pm-inv-replace($private_properties, $margin, margin);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $margin;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($margin, $param) {\r\n        @return map.get($margin, $param);\r\n    }\r\n    $margin-top: map.get($margin, top);\r\n    $margin-right: map.get($margin, right);\r\n    $margin-bottom: map.get($margin, bottom);\r\n    $margin-left: map.get($margin, left);\r\n    @if list.index(map.values($margin), inherit) {\r\n        @return inherit;\r\n    }\r\n    @if $margin-top == $margin-right and $margin-bottom == $margin-left and $margin-left == $margin-top {\r\n        @return $margin-top;\r\n    }\r\n    @if $margin-top == $margin-bottom and $margin-left == $margin-right {\r\n        @return $margin-top $margin-left;\r\n    }\r\n    @if $margin-left == $margin-right {\r\n        @return $margin-top $margin-left $margin-bottom;\r\n    }\r\n    @return (\r\n        $margin-top\r\n        $margin-right\r\n        $margin-bottom\r\n        $margin-left\r\n    );\r\n}\r\n\r\n@function font($param: false) {\r\n    $font: (\r\n        style: default-props.$font-style,\r\n        variant: default-props.$font-variant,\r\n        weight: default-props.$font-weight,\r\n        size: default-props.$font-size,\r\n        line-height: default-props.$line-height,\r\n        family: default-props.$font-family\r\n    );\r\n\r\n    $font: font-handler($font, $properties);\r\n    $font: font-handler($font, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $font;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($font, $param) {\r\n        @return map.get($font, $param);\r\n    }\r\n\r\n    $font-size: map.get($font, size);\r\n    $font-variant: map.get($font, variant);\r\n    $font-weight: map.get($font, weight);\r\n    $font-style: map.get($font, style);\r\n    $font-family: map.get($font, family);\r\n\r\n    @if $font-variant == inherit and $font-weight == inherit and $font-style == inherit and $font-family == inherit {\r\n        @return inherit;\r\n    }\r\n\r\n    $output: ();\r\n\r\n    @if $font-style != inherit {\r\n        $output: list.append($output, $font-style, space);\r\n    }\r\n    @if $font-variant != inherit {\r\n        $output: list.append($output, $font-variant, space);\r\n    }\r\n    @if $font-weight != inherit {\r\n        $output: list.append($output, $font-weight, space);\r\n    }\r\n    $output: list.append($output, str.unquote(map.get($font, 'size') + \"/\"+ map.get($font, 'line-height')), space);\r\n    @if $font-family != inherit {\r\n        $output: list.append($output, $font-family, space);\r\n    }    \r\n    @return $output;\r\n}\r\n\r\n@function background($param: false) {    \r\n    $background: (\r\n        attachment: default-props.$background-attachment,\r\n        color: theme.color(background-color),\r\n        image: default-props.$background-image,\r\n        position: default-props.$background-position,\r\n        repeat: default-props.$background-repeat\r\n    );\r\n\r\n    $background: background-handler($background, $properties);\r\n    $background: background-handler($background, $private_properties);\r\n\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $background;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($background, $param) {\r\n        @return map.get($background, $param);\r\n    }\r\n\r\n    @if(map.get($background, image) == default-props.$background-image) {\r\n        @return (\r\n            map.get($background, color)\r\n        );\r\n    }\r\n    $output: ();\r\n    $background-attachment: map.get($background, attachment);\r\n    $background-repeat: map.get($background, repeat);\r\n    $background-position: meta.inspect(map.get($background, position));\r\n\r\n    @if $background-attachment != default-props.$background-attachment {\r\n        $output: list.append($output, $background-attachment);\r\n    }\r\n\r\n    $output: list.append($output, map.get($background, color));\r\n    $output: list.append($output, map.get($background, image));\r\n\r\n\r\n    @if $background-position != meta.inspect(default-props.$background-position) {\r\n        $output: list.append($output, $background-position);\r\n    }\r\n    @if $background-repeat != default-props.$background-repeat {\r\n        $output: list.append($output, $background-repeat);\r\n    }\r\n\r\n    @return $output;\r\n}\r\n\r\n@function list-style($param:false) {\r\n    $list: (\r\n        type: default-props.$list-style-type,\r\n        position: default-props.$list-style-position,\r\n        image: default-props.$list-style-image,\r\n    );\r\n\r\n    $list: list-style-handler($list, $properties);\r\n    $list: list-style-handler($list, $private_properties);\r\n\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $list;\r\n    }\r\n    @if type-of($param) == string and map.has-key($list, $param) {\r\n        @return map.get($list, $param);\r\n    }\r\n\r\n    $output: ();\r\n\r\n    @if map.has-key($list, type) and map.get($list, type) != inherit {\r\n        $output: list.append($output, map.get($list, type), space);\r\n    }\r\n\r\n    @if map.get($list, position) != default-props.$list-style-position and map.get($list, position) != inherit {\r\n        $output: list.append($output, map.get($list, position), space);\r\n    }\r\n\r\n    @if map.get($list, image) != default-props.$list-style-image and map.get($list, image) != inherit {\r\n        $output: list.append($output, map.get($list, image), space);\r\n    }\r\n\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n\r\n    @return $output;\r\n}\r\n\r\n@function border-radius($param: false) {\r\n    $radius: (top-left:0, top-right:0, bottom-right:0, bottom-left:0);\r\n\r\n    $radius: border-radius-handler($radius, $properties);\r\n    $radius: border-radius-handler($radius, $private_properties);\r\n\r\n    @if list.index(map.values($radius), inherit) {\r\n        @return inherit;\r\n    }\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $radius;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($radius, $param) {\r\n        @return map.get($radius, $param);\r\n    }\r\n    $top-left: map.get($radius, top-left);\r\n    $top-right: map.get($radius, top-right);\r\n    $bottom-left: map.get($radius, bottom-left);\r\n    $bottom-right: map.get($radius, bottom-right);\r\n    @if $top-left == $bottom-right and $bottom-left == $top-right and $bottom-left == $top-left {\r\n        @return $top-left;\r\n    } @else if $top-left == $bottom-right and $bottom-left == $top-right {\r\n        @return $top-left $bottom-left;\r\n    } @else if $top-right == $bottom-left {\r\n        @return $top-left $top-right $bottom-right;\r\n    }\r\n    @return (\r\n        $top-left\r\n        $top-right\r\n        $bottom-left\r\n        $bottom-right\r\n    );\r\n}\r\n\r\n@function overflow($param: false) {\r\n    $overflow: map.get($properties, overflow);\r\n    $overflow-x: map.get($properties, overflow-x);\r\n    $overflow-y: map.get($properties, overflow-y);\r\n    $output: $overflow;\r\n    @if $overflow-x == $overflow-y and $overflow != $overflow-x {\r\n        $output: $overflow-x;\r\n    }\r\n    @if type-of($param) == bool and $param {\r\n        @return (\r\n            overflow: $output,\r\n            overflow-x: $overflow-x,\r\n            overflow-y: $overflow-y,\r\n        );\r\n    }\r\n    @return $output;\r\n}\r\n\r\n@function outline($param: false) {\r\n    $outline: (\r\n        width: default-props.$outline-width,\r\n        style: default-props.$outline-style,\r\n        color: default-props.$outline-color\r\n    );\r\n\r\n    $outline: outline-handler($outline, $properties);\r\n    $outline: outline-handler($outline, $private_properties);\r\n\r\n    @if type-of($param) == bool and $param {\r\n        @return $outline;\r\n    }\r\n\r\n    @if type-of($param) == string and map.has-key($outline, $param) {\r\n        @return map.get($outline, $param);\r\n    }\r\n    $outline-width: map.get($outline, width);\r\n    $outline-style: map.get($outline, style);\r\n    $outline-color: map.get($outline, color);\r\n    $output: ();\r\n\r\n    @if($outline-style == none) {\r\n        @return none;\r\n    }\r\n    @if($outline-width == 0) {\r\n        @return 0;\r\n    }\r\n\r\n    @if $outline-width != inherit {\r\n        $output: list.append($output, $outline-width);\r\n    }\r\n    @if $outline-style != inherit {\r\n        $output: list.append($output, $outline-style);\r\n    }\r\n    @if $outline-color != inherit {\r\n        $output: list.append($output, $outline-color);\r\n    }\r\n    @if list.length($output) == 0 {\r\n        @return inherit;\r\n    }\r\n    @return $output;\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.props\r\n*   Desc: This file is part of ungic.component.props module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-props\r\n*/\r\n@use \"./config\" as this;\r\n@use \"ungic.default-properties\" as default-props;\r\n\r\n@use \"sass:map\";\r\n@use \"sass:meta\";\r\n@use \"ungic.utils\" as utils;\r\n@use \"./handlers\" as property-handlers;\r\n@use \"ungic.project\" as project;\r\n\r\n$component: meta.module-variables(this);\r\n$default-properties: meta.module-variables(default-props);\r\n\r\n@use \"ungic.meta.property-handlers\" as global-property-handlers;\r\n\r\n/*\r\n*   Gel all component properties\r\n*/\r\n@function properties($defaults: false) {\r\n  @if $defaults {\r\n    @return utils.merge($default-properties, this.$properties);\r\n  }\r\n  @return this.$properties;\r\n}\r\n\r\n@function props($defaults: false) {\r\n  @if $defaults {\r\n    @return utils.merge($default-properties, this.$properties);\r\n  }\r\n  @return this.$properties;\r\n}\r\n\r\n\r\n/*\r\n*   Get the computed value of a specific property of a component\r\n*/\r\n@function prop($prop, $args...) {\r\n  @return property-handlers.handler($prop, $args...);\r\n}\r\n\r\n/*\r\n*   Check if component property differs from project property, also checks for changes to derived properties.\r\n*/\r\n@function is-prop-changed($prop) {\r\n  $all_props: utils.merge($default-properties, this.$properties);\r\n  @if not map.has-key($all_props, $prop) {\r\n    @return null;\r\n  }\r\n  $project-value: global-property-handlers.handler($prop, (properties: project.$properties, private-properties: ()));\r\n  $private-value: property-handlers.handler($prop);\r\n\r\n  @if meta.inspect($project-value) != meta.inspect($private-value) {\r\n    @return true;\r\n  } @else {\r\n    @return false;\r\n  }\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.props\r\n*   Desc: This file is part of ungic.component.props module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-props\r\n*/\r\n@forward \"config\";\r\n@forward \"functions\";","/*------------------------------------------\r\n*   Optional component configuration file. \r\n--------------------------------------------\r\n*   This file can contain any configuration parameters of the component.\r\n*/\r\n\r\n@use \".core/props\" as *; // Get access to the processed properties of this component, you can use the prop() method to get the processed value.\r\n@use \"ungic.theme\" as theme; // Get access to theme module to work with colors","/*------------------------------------------\r\n*   Optional project file\r\n--------------------------------------------\r\n*   Module: ungic.project\r\n*   Desc: This file is used to override the configuration of components. To redefine a specific component, check the $cid (Component ID) variable.\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-project\r\n* -------\tDon't change this part ---------*/\r\n@use \"sass:map\";\r\n$cid: null !default;\r\n$config: () !default;\r\n/* ---------------------------------------- */\r\n\r\n\r\n// Example:\r\n@if($cid == helloworld) {\r\n  $config: map.merge($config, ());\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.core\r\n*   Desc: This file is part of ungic.component.core module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-core\r\n*/\r\n\r\n$cid: null !default;\r\n$config: () !default;\r\n$project: () !default;\r\n","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.core\r\n*   Desc: This file is part of ungic.component.core module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-core\r\n*/\r\n\r\n@use \"../config\" as this;\r\n\r\n@use \"sass:map\";\r\n@use \"sass:color\";\r\n@use \"sass:meta\";\r\n@use \"sass:list\";\r\n@use \"sass:string\" as str;\r\n@use \"ungic.meta\" as un-meta;\r\n@use \"sass:selector\";\r\n\r\n/*\r\n*   Check if a component exists in project.\r\n*/\r\n@function exist() {\r\n  @return true;\r\n}\r\n\r\n/*\r\n*   Export SASS data to JSON\r\n*/\r\n@function export($oid, $data) {\r\n  @return un-meta.export(this.$cid, $oid, $data);\r\n}\r\n\r\n/*\r\n*   Method for creating a selector by adding a suffix to the component class name using an append sass method.\r\n*/\r\n@function this($suffix) {\r\n  @return inspect(nth(selector.append(cid(true), $suffix), 1));\r\n}\r\n\r\n/*\r\n*   Get component ID\r\n*/\r\n@function cid($as_selector: false) {\r\n  $cid: this.$cid;\r\n  @if $as_selector {\r\n    @return \".#{$cid}\";\r\n  }\r\n  @return $cid;\r\n}\r\n\r\n/*\r\n*   Get access to config of the current component. \r\n*   Using without parameters returns the entire configuration of the component.\r\n*/\r\n@function config($key: \"\", $subkey: false) {\r\n  @if map.has-key(this.$config, $key) {\r\n    $result: map.get(this.$config, $key);\r\n    @if $subkey and type-of($result) == map {\r\n      @if map.has-key($result, $subkey) {\r\n        @return map.get($result, $subkey);\r\n      } @else {\r\n        @return $result;\r\n      }\r\n    } @else {\r\n      @return $result;\r\n    }\r\n  } @else if $key != \"\" {\r\n    @return false;\r\n  }\r\n  @return this.$config;\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.core\r\n*   Desc: This file is part of ungic.component.core module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-core\r\n*/\r\n\r\n@use \"../config\" as this;\r\n@use \"sass:map\";\r\n@use \"sass:list\";\r\n@use \"sass:selector\";\r\n@use \"sass:string\" as str;\r\n@use '../functions' as *;\r\n@use \"ungic.meta\" as un-meta;\r\n@use \"ungic.utils\" as *;\r\n\r\n/*\r\n*   This mixin creates a wrapper for component rules with class name of component\r\n*/\r\n@mixin component {\r\n    #{cid(true)} {\r\n        @content;\r\n    }\r\n}\r\n\r\n/*\r\n*   This mixin creates a wrapper for component rules with class name of component\r\n*/\r\n@mixin this($suffix: null) {\r\n    @if $suffix {\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        #{this($suffix)} {\r\n            @content;\r\n        }\r\n    } @else {\r\n        #{cid(true)} {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   This method adds the passed suffix to the beginning of the current selector.\r\n*   if the suffix is not a valid selector, it will be merged with component class name using the append sass method, \r\n*   this behavior can be disabled using the second parameter of this method.\r\n*/\r\n@mixin wrap($suffix: null, $merge: true) {\r\n    @if $suffix {\r\n        $output: ();\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        $lsts: (':', '-', '+', '~', '_');\r\n        @each $selector in & {\r\n            $replacements:  selector.parse($suffix);\r\n            @each $replacement in $replacements {\r\n                $fs: str.slice(inspect($replacement), 0, 1);\r\n                @if list.index($lsts, $fs) and $merge {\r\n                    $replacement:  selector.append(cid(true), $replacement);\r\n                }\r\n                $output: list.append($output, str-replace(inspect($selector), cid(true), #{$replacement cid(true)}, false), comma);\r\n            }\r\n        }\r\n        @at-root #{$output} {\r\n            @content;\r\n        }\r\n    } @else {\r\n        &#{cid(true)} {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   This method uses the append method to add the passed suffix to the root element of the selector.\r\n*   Important! The selector root must be with the class name of the component!\r\n*/\r\n@mixin and($suffix: null) {\r\n    @if $suffix {\r\n        $output: ();\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        @each $selector in & {\r\n            $replacements:  selector.append(cid(true), $suffix);\r\n            @each $replacement in $replacements {\r\n                $output: list.append($output, str-replace(inspect($selector), cid(true), $replacement, false), comma);\r\n            }\r\n        }\r\n        @at-root #{$output} {\r\n            @content;\r\n        }\r\n    } @else {\r\n        &#{cid(true)} {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   This method inserts a part of the selector immediately after the first root of the selector, serves to create a sibling selector\r\n*/\r\n@mixin nest($suffix: null) {\r\n    @if $suffix {\r\n        $output: ();\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        @each $selector in & {\r\n            $replacements:  selector.nest(cid(true), $suffix);\r\n            @each $replacement in $replacements {\r\n                $output: list.append($output, str-replace(inspect($selector), cid(true), $replacement, false), comma);\r\n            }\r\n        }\r\n        @at-root #{$output} {\r\n            @content;\r\n        }\r\n    } @else {\r\n        &#{cid(true)} {\r\n            @content;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   This method inserts a part of the selector before the current element.\r\n*/\r\n@mixin before($suffix: null) {\r\n    @if $suffix {\r\n        $output: ();\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        @each $selector in & {\r\n            $replacements:  selector.parse($suffix);\r\n            @each $replacement in $replacements {\r\n               $output: list.append($output, insert-nth($selector, list.length($selector), $replacement), comma);\r\n            }\r\n        }\r\n        @at-root #{$output} {\r\n          @content;\r\n        }\r\n    } @else {\r\n        &#{cid(true)} {\r\n          @content;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n*   This method adds a suffix to the previous selector element using the append sass method. \r\n*   If the suffix is not a valid selector, it will be merged with component class name using the append sass method, \r\n*   this behavior can be disabled using the second parameter of this method.\r\n*/\r\n@mixin prev($suffix: null, $merge: true) {\r\n    @if $suffix {\r\n        $output: ();\r\n        $suffix: str-replace($suffix, '___this', cid());\r\n        $suffix: str-replace($suffix, '__this', cid(true));\r\n        $lsts: (':', '-', '+', '~', '_');\r\n        @each $selector in & {\r\n            $lng: list.length($selector);\r\n            $last: list.nth($selector, list.length($selector));\r\n            $replacements:  selector.parse($suffix);\r\n            @each $replacement in $replacements {\r\n                 @if $lng > 1 {\r\n                    $output: append($output, #{selector.append(remove-nth($selector, list.length($selector)), $replacement) $last}, comma);\r\n                } @else {\r\n                    $fs: str.slice(inspect($replacement), 0, 1);\r\n                    @if list.index($lsts, $fs) and $merge {\r\n                        $output: append($output, #{selector.append(cid(true), $suffix) $last}, comma);\r\n                    } @else {\r\n                        $output: append($output, #{$suffix $last}, comma);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        @at-root #{$output} {\r\n          @content;\r\n        }\r\n    } @else {\r\n        &#{cid(true)} {\r\n          @content;\r\n        }\r\n    }\r\n}","/*---------------------------------------------\r\n*   Framework system file!\r\n-----------------------------------------------\r\n*   Module: ungic.component.core\r\n*   Desc: This file is part of ungic.component.core module\r\n*   API:  https://ungic.com/guide/api/sass.html#ungic-component-core\r\n*/\r\n\r\n@forward \"config\";\r\n@forward \"functions\";\r\n@forward \"mixins\";\r\n@forward \"props\";","/*------------------------------------------\r\n*   Optional component file\r\n--------------------------------------------\r\n*   This file is processed once per compilation cycle. The main task of this file is to export data from sass.\r\n*   Example: $export: this.export('OPTION_ID', (myname: Artem));\r\n*/\r\n\r\n@use \".core\" as this;\r\n\r\n","/*---------------------------------------------\r\n*   Optional component file of custom type\r\n---------------------------------------------*/\r\n\r\n@use \"ungic.component\" as *;\r\n","/*---------------------------------------------\r\n*   Optional component file of custom type\r\n---------------------------------------------*/\r\n\r\n@use \"ungic.component\" as *;\r\n","/*------------------------------------------\r\n*   Optional component render file\r\n--------------------------------------------\r\n*   This file should contain the final CSS style rules that will be generated in CSS!\r\n*   API: https://ungic.com/guide/api/sass.html\r\n*/\r\n\r\n// SASS native modules\r\n@use \"sass:meta\" as meta;\r\n@use \"sass:map\" as map;\r\n\r\n// Component core\r\n@use \".core\" as this;\r\n\r\n// Theme module\r\n@use \"ungic.theme\" as *;\r\n\r\n// Ungic framework modules\r\n@use \"ungic.meta\" as un-meta;\r\n@use \"ungic.utils\" as un-utils;\r\n\r\n// Custom\r\n@use \"functions\" as *;\r\n@use \"mixins\" as *;\r\n\r\n// you must include any style files here\r\n// or write them in this file\r\n.CodeMirror {\r\n  background-color: #282A36 !important;\r\n}\r\n@include this.component {\r\n  &-mixcode {\r\n    position: relative;\r\n    background-color: #fff;\r\n    font-size: 16px;\r\n    label {\r\n      display: block;\r\n      margin-bottom: .5em;\r\n    }\r\n    font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif;\r\n    &, p {\r\n      font-size: 16px;\r\n    }\r\n    &-alert {\r\n      margin: 1em 0;\r\n      padding: .5em 1em;\r\n      &.error {      \r\n        background-color: color(danger, .9);\r\n        color: color(danger, -.6);\r\n      }\r\n      &.info {\r\n        background-color: color(info, .9);\r\n        color: color(info, -.6);\r\n      }\r\n    }\r\n    &-loader {\r\n      top: 0;\r\n      bottom: 0;\r\n      right: 0;\r\n      left: 0;\r\n      position: absolute;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      font-size: 20px;\r\n      color: #000;\r\n      z-index: 200;\r\n      background-color: rgba(#FFF, .8);\r\n    }\r\n    .autocomplete-input {\r\n      background-color: #fff;\r\n      &:disabled {\r\n        background-color: gray(.9);\r\n      }\r\n      &:focus {\r\n        box-shadow: 0 0 0 2px color(primary);\r\n      }\r\n    }\r\n    &-shortcode {\r\n      background-color: gray(-.9);\r\n      color: #FFF;\r\n      padding: .5em;\r\n      border-radius: 3px;\r\n      display: inline-block;\r\n      font-family: monospace;\r\n    }\r\n    &-btn {\r\n      background-color: #FFF;\r\n      border: 2px solid color(primary);\r\n      color: #000;\r\n      padding: .5em 1em;\r\n      border-radius: 6px;\r\n      cursor: pointer;\r\n      &:hover {\r\n        background-color: color(gray, .9);\r\n      }\r\n      &:focus {\r\n        background-color: color(primary, .9);\r\n        box-shadow: 0 0 0 2px color(primary);\r\n      }\r\n    }\r\n    max-width: 800px;\r\n    margin: 2em auto;\r\n    padding: 2em;\r\n    border-radius: 6px;\r\n    box-shadow: 3px 3px 12px rgba(#000, .1);\r\n    font-size: 16px;\r\n    &-form {\r\n      max-width: 400px;\r\n    }\r\n    &-select, &-input, &-selected {\r\n      height: 50px;\r\n      padding: 0 1em;\r\n      border: 2px solid gray(.4);\r\n      border-radius: 6px;\r\n      width: 100%;\r\n      display: block;\r\n      &:hover {\r\n        border-color: gray();\r\n      }\r\n      &:focus {\r\n        border-color:color(primary);\r\n      }\r\n    }\r\n    &-translates {\r\n      &-controls {\r\n        margin-top: 2em;\r\n        a {\r\n          display: inline-flex;\r\n          width: 50px;          \r\n          height: 50px;\r\n          align-items: center;\r\n          justify-content: center;\r\n          text-decoration: none;\r\n          i {\r\n            display: block;\r\n            font-size: 26px;\r\n            width: auto;\r\n            height: auto;\r\n          }\r\n        }\r\n      }\r\n      @include this.this {\r\n        &-mixcode-input:disabled {\r\n          border: none;\r\n          color: #000;\r\n          box-shadow: none;\r\n          background-color: gray(.9);\r\n        }\r\n      }\r\n      &-btn {\r\n        height: 50px;\r\n        padding: 0 1em;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-width: 160px;\r\n        cursor: pointer;\r\n        border-radius: 6px;\r\n        &.submit {\r\n          background-color: #fff;\r\n          color: color(success, -.6);\r\n          border: 2px solid color(success, -.2);\r\n          &:hover {\r\n            background-color: color(success, .9);\r\n          }\r\n          &:focus {\r\n            box-shadow: 0 0 0 2px color(success);\r\n          }         \r\n          &:disabled {\r\n            border-color: gray(-.2);            \r\n            &:hover, &, &:focus {\r\n              background-color: color(gray, .9);\r\n              color: gray(-.2);\r\n            }\r\n            cursor: not-allowed;\r\n          }\r\n        }\r\n        &.add {\r\n          svg {\r\n            margin-left: .5em;\r\n          }\r\n          background-color: #fff;\r\n          color: color(primary);\r\n          border: 2px solid color(primary);\r\n          &:hover {\r\n            background-color: color(primary, .9);\r\n          }\r\n          &:focus {\r\n            box-shadow: 0 0 0 2px color(primary);\r\n          }\r\n          &:disabled {\r\n            border-color: gray(-.2);\r\n            &:hover, &, &:focus {\r\n              background-color: color(gray, .9);\r\n              color: gray(-.2);\r\n            }\r\n            cursor: not-allowed;\r\n          }\r\n        }\r\n      }\r\n      &-footer {\r\n        text-align: center;\r\n        padding: 1em;\r\n      }\r\n      &-row {\r\n        display: flex;\r\n        margin: 0 -.5em;\r\n        border-block-end: 2px solid gray(.8);\r\n        align-items: flex-start;\r\n      }\r\n      &-cell {\r\n        flex-grow: 1;\r\n        padding: .5em;\r\n        &.has-control {\r\n          >span {\r\n            display: block;\r\n            flex-grow: 1;\r\n          }\r\n          align-items: flex-start;\r\n          display: flex;\r\n          button {\r\n            margin-top: 1.6em;\r\n            margin-left: 1em;\r\n            height: 50px;\r\n            padding: 0;\r\n            width: 100px;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            border-radius: 12px;\r\n            border: 2px solid gray(.8);\r\n            background-color: #fff;\r\n            cursor: pointer;\r\n            &:hover {\r\n              background-color: color(primary, .9);\r\n              &:focus {\r\n                box-shadow: 0 0 0 2px color(primary);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }     \r\n    }\r\n    &-selected {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      button {\r\n        padding: .2em;\r\n        display: inline-flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        svg {\r\n          display: block;\r\n        }\r\n        border: none;\r\n        background: none;\r\n        border-radius: 12px;\r\n        background-color: #fff;\r\n        cursor: pointer;\r\n        &:hover {\r\n          background-color: color(gray, .9);\r\n        }\r\n        &:focus {\r\n          background-color: color(primary, .9);\r\n        }\r\n      }\r\n    }\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n    &-heading {    \r\n        font-size: 2em;\r\n        margin-top: 0;\r\n        margin-bottom: 1em;      \r\n    }\r\n    &-desc {\r\n      p {\r\n        margin: 1em 0;\r\n      }\r\n    }\r\n    &-stepper {\r\n      border-radius: 6px;      \r\n      border: 2px solid gray(.8);\r\n      &-step {\r\n        border-block-end: 2px solid gray(.8);\r\n        &-number {\r\n          display: inline-flex;\r\n          width: 32px;\r\n          height: 32px;\r\n          justify-content: center;\r\n          align-items: center;\r\n          border: 2px solid gray(.8);\r\n          border-radius: 50%;\r\n          margin-right: .5em;\r\n        }\r\n        &-desc {\r\n          display: block;\r\n          font-weight: 400;\r\n          line-height: 1.2;\r\n          margin-top: .2em;\r\n          font-size: .8em;\r\n          color: gray(-.2)\r\n        }\r\n        &-heading {\r\n          margin: 0;\r\n          button {\r\n            text-align: start;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            width: 100%;\r\n            background: none;\r\n            border: none;\r\n            padding: 1em;\r\n            cursor: pointer;\r\n            background-color: color(gray, .9);\r\n            &, :disabled {\r\n              color: #000;\r\n            }\r\n            &:hover {\r\n              background-color: color(primary, .9);\r\n            }\r\n            &[aria-expanded=true] {\r\n              background-color: #fff;\r\n              svg {\r\n                position: relative;\r\n                transform: rotate(180deg);\r\n                transition: all .2s;\r\n              }\r\n              @include this.this {\r\n                &-mixcode-stepper-step-number {\r\n                  border-color: color(primary);\r\n                }\r\n              }\r\n            }            \r\n          }\r\n        }\r\n        &-region {\r\n          padding: 1em;\r\n        }\r\n        &.disabled {\r\n          opacity: .8;\r\n          @include this.this {\r\n            &-mixcode-stepper-step-heading {\r\n              button {\r\n                background-color: gray(.9);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        &.completed {\r\n          @include this.this {\r\n            &-mixcode-stepper-step-heading {\r\n              button {\r\n                background-color: color(success, .94);\r\n              }\r\n            }\r\n          }\r\n          @include this.this {\r\n            &-mixcode-stepper-step-number {\r\n              border-color: color(success);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n"]}